substitutions:
  name: luftguetemesser2
  platform: ESP32
  board: nodemcu-32s

packages:
  wifi: !include common/wifi.yaml
  mqtt: !include common/mqtt.yaml
  device_base: !include common/device_base.yaml

logger:
  baud_rate: 0

uart:
  - rx_pin: GPIO33
    tx_pin: GPIO32
    baud_rate: 9600
    id: pms
  - rx_pin: GPIO3
    tx_pin: GPIO1
    baud_rate: 9600
    id: mh

i2c:
  sda: 14
  scl: 25

globals:
   - id: leds_enabled
     type: bool
     initial_value: 'true'
   - id: buzzer_enabled
     type: bool
     initial_value: 'true'

mqtt:
  on_message:
    - topic: ${name}/test_alert
      then:
        - script.execute: test_alert
    - topic: ${name}/calibrate
      then:
        - logger.log: "start calibration"
        - switch.turn_on: mhz19_hd
        - delay: 8s
        - switch.turn_off: mhz19_hd
        - logger.log: "calibration completed"
        - script.execute: test_alert
  on_json_message:
    - topic: ${name}/enable_leds
      then:
        - lambda: |-
            id(leds_enabled) = x["state"];
        - script.execute: test_alert
    - topic: ${name}/enable_buzzer
      then:
        - lambda: |-
            id(buzzer_enabled) = x["state"];
        - script.execute: test_alert

bme680_bsec:
    address: 0x77
    iaq_mode: static
    temperature_offset: 2
    sample_rate: lp
    state_save_interval: 6h

switch:
  - platform: gpio
    name: green
    id: green
    pin: GPIO19
  - platform: gpio
    name: yellow
    id: yellow
    pin: GPIO18
  - platform: gpio
    name: red
    id: red
    pin: GPIO16
  - platform: gpio
    id: buzzer
    name: buzzer
    pin: GPIO21
    inverted: true
  - platform: gpio
    name: mhz19_hd
    id: mhz19_hd
    pin: GPIO27
    inverted: true

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO5
      mode:
        input: true
        pullup: true
      inverted: true
    name: button1
    filters:
      - delayed_on_off: 50ms

sensor:
  - platform: bme680_bsec
    temperature:
      name: "temperature"
      id: "temperature"
#      filters:
#      - calibrate_linear:
#        # - Map from sensor -> measured value
#          - 0 -> 0
#          - 18.9 -> 16.7
    pressure:
      name: "pressure"
      id: "pressure"
    humidity:
      name: "humidity"
      id: "humidity"
#      filters:
#      - calibrate_linear:
#        # - Map from sensor -> measured value
#          - 0 -> 0
#          - 54.4 -> 61.0
    iaq:
      name: "iaq"
      id: "iaq"
    co2_equivalent:
      name: "CO2 Equivalent"
      id: "co2_equivalent"
    iaq_accuracy:
      name: iaq_accuracy
      id: iaq_accuracy
    breath_voc_equivalent:
      name: "Breath VOC Equivalent"
      id: "breath_voc_equivalent"
    gas_resistance:
      name: "Gas Resistance"
      id: "gas_resistance"
  - platform: template
    name: "absolute_humidity"
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(temperature).state) /
        (id(temperature).state + 243.5)) * id(humidity).state * mw) /
        ((273.15 + id(temperature).state) * r); // in grams/m^3
  - platform: template
    name: "dew_point"
    lambda: |-
      return (243.5*(log(id(humidity).state/100)+((17.67*id(temperature).state)/
        (243.5+id(temperature).state)))/(17.67-log(id(humidity).state/100)-
        ((17.67*id(temperature).state)/(243.5+id(temperature).state))));
  - platform: pmsx003
    type: PMSX003
    uart_id: pms
    pm_1_0:
      name: "Particulate Matter <1.0µm Concentration"
      id: pm_1_0
    pm_2_5:
      name: "Particulate Matter <2.5µm Concentration"
      id: pm_2_5  
    pm_10_0:
      name: "Particulate Matter <10.0µm Concentration"
      id: pm_10_0
#    update_interval: 120s
  - platform: mhz19
    co2:
      name: "CO2"
      id: co2
    temperature:
      name: "mhz19-temperature"
    update_interval: 60s
    automatic_baseline_calibration: false
    uart_id: mh

text_sensor:
  - platform: bme680_bsec
    iaq_accuracy:
      name: "BME680 IAQ Accuracy"
  - platform: template
    name: alert_voc
    id: alert_voc
    lambda: !lambda |-
      if (id(breath_voc_equivalent).state < 3.0) {    
        return {"green"};
      } else {
        if (id(breath_voc_equivalent).state > 10.0) {    
          return {"red"};
        } else {
          return {"yellow"};         
        }
      }
  - platform: template
    name: alert_pm
    id: alert_pm
    lambda: !lambda |-
      if (id(pm_1_0).state < 25.0 && id(pm_2_5).state < 25.0 && id(pm_10_0).state < 25.0) {    
        return {"green"};
      } else {
        if (id(pm_1_0).state > 200.0 || id(pm_2_5).state > 200.0 || id(pm_10_0).state >200.0) {    
          return {"red"};
        } else {
          return {"yellow"};         
        }
      }
  - platform: template
    name: alert_co2
    id: alert_co2
    lambda: !lambda |-
      if (id(co2).state < 700.0) {    
        return {"green"};
      } else {
        if (id(co2).state > 2000.0) {    
          return {"red"};
        } else {
          return {"yellow"};         
        }
      }
  - platform: template
    name: alert
    lambda: !lambda |-
      if (id(alert_voc).state == "green" && id(alert_co2).state == "green" && id(alert_pm).state == "green") {    
        id(no_alert).execute();
        return {"green"};
      } else {
        if (id(alert_voc).state == "red" && id(alert_co2).state == "red" && id(alert_pm).state == "red") {
          id(red_alert).execute();
          return {"green"};
        } else {
          id(yellow_alert).execute();
          return {"yellow"};         
        }
      }

script:
  - id: test_alert
    then:
      - script.execute: red_alert
  - id: red_alert
    then:
      - switch.turn_off: red
      - switch.turn_off: yellow
      - switch.turn_off: green
      - if:
          condition:
            lambda: |-
              return id(leds_enabled);
          then:
            - switch.turn_on: red
      - if:
          condition:
            lambda: |-
              return id(buzzer_enabled);
          then:
            - switch.turn_on: buzzer
            - delay: 1s
            - switch.turn_off: buzzer
  - id: yellow_alert
    then:
      - switch.turn_off: red
      - switch.turn_off: yellow
      - switch.turn_off: green
      - if:
          condition:
            lambda: |-
              return id(leds_enabled);
          then:
            - switch.turn_on: yellow
      - if:
          condition:
            lambda: |-
              return id(buzzer_enabled);
          then:
            - switch.turn_on: buzzer
            - delay: 100ms
            - switch.turn_off: buzzer
            - delay: 500ms
            - switch.turn_on: buzzer
            - delay: 100ms
            - switch.turn_off: buzzer
            - delay: 500ms
            - switch.turn_on: buzzer
            - delay: 100ms
            - switch.turn_off: buzzer
  - id: no_alert
    then:
      - switch.turn_off: red
      - switch.turn_off: yellow
      - switch.turn_off: green
      - if:
          condition:
            lambda: |-
              return id(leds_enabled);
          then:
            - switch.turn_on: green
      - switch.turn_off: buzzer
