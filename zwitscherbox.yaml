esphome:
  name: zwitscherbox
  board: esp12e
  platform: ESP8266
  on_boot:
    then:
      - logger.log: 'Initialize DF Player'
      - dfplayer.set_volume: 20
      - dfplayer.set_eq: JAZZ
      - dfplayer.play: 1

packages:
  wifi: !include common/wifi.yaml
  mqtt: !include common/mqtt.yaml
  device_base: !include common/device_base.yaml

i2c:
  sda: 5
  scl: 4
  scan: True

uart:
  tx_pin: TX
  rx_pin: RX
  baud_rate: 9600

dfplayer:
  id: df_player

globals:
   - id: playing_stopped
     type: bool
     initial_value: 'false'

sensor:
  - platform: htu21d
    temperature:
      id: "temperature"
      name: "temperature"
      filters:
      - calibrate_linear:
        # - Map from sensor -> measured value
          - 0 -> 0
          - 21 -> 19
    humidity:
      id: "humidity"
      name: "humidity"
#      filters:
#      - calibrate_linear:
#        # - Map from sensor -> measured value
#          - 0 -> 0
#          - 53 -> 65
  - platform: template
    name: "absolute humidity"
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(temperature).state) /
        (id(temperature).state + 243.5)) * id(humidity).state * mw) /
        ((273.15 + id(temperature).state) * r); // in grams/m^3
  - platform: template
    name: "dew_point"
    lambda: |-
      return (243.5*(log(id(humidity).state/100)+((17.67*id(temperature).state)/
        (243.5+id(temperature).state)))/(17.67-log(id(humidity).state/100)-
        ((17.67*id(temperature).state)/(243.5+id(temperature).state))));
        
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
      inverted: true
      mode: INPUT_PULLUP
    name: "Previous"
    filters:
      - delayed_on_off: 50ms
    on_press:
      then:
        - dfplayer.play_previous:

  - platform: gpio
    pin:
      number: GPIO12
      inverted: true
      mode: INPUT_PULLUP
    name: "Pause/Play"
    filters:
      - delayed_on_off: 50ms
    on_press:
        - if:
            condition:
              lambda: |-
                return id(playing_stopped);
            then:
              - dfplayer.set_volume: 20
              - dfplayer.set_eq: JAZZ
              - lambda: |-
                  id(df_player).start();
                  id(playing_stopped) = false;
            else:
              - lambda: |-
                  id(df_player).pause();
                  id(playing_stopped) = true;
        - delay: 300s
        - lambda: |-
            id(playing_stopped) = false;

  - platform: gpio
    pin:
      number: GPIO14
      inverted: true
      mode: INPUT_PULLUP
    name: "Next"
    filters:
      - delayed_on_off: 50ms
    on_press:
      then:
        - dfplayer.play_next:

  - platform: gpio
    pin:
      number: GPIO16
    name: "PIR"
    on_press:
      then:
        if:
          condition:
            lambda: |-
              return !id(playing_stopped) and !id(df_player).is_playing();
          then:
            - lambda: |-
                id(df_player).next();
